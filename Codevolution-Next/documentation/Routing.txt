Next.js has a file-system based routing system:
    URLs we access in our browser are determined by how we organize our files and folders in our code

Routing conventions:

1. All routes must live inside the App folder
2. Route files must be names page.js/page.tsx
3. Each folder represents a segment of the URL path 

When these conventions are followed, the file automatically becomes available as a route 

Example: 
page.tsx file inside App folder automatically maps to our site's root URL 

Creating Routes:

1) app/page.tsx - localhost:3000/
2) app > about/page.tsx - localhost:3000/about 
3) app > profile/page.tsx - locanhost:3000/profile 

** This way Next.js file-based routing does the heavy-lifting.
** We don't need to install and configure Router unlike React.js 
[This is Next's 'Convention over Configuration' philosophy when it comes to Routing]

// Nested Routes:    
app > blog > - first > page.tsx 
app > blog > - second > page.tsx 

// Dynamic Routes:   
app > products > [productId] > page.tsx 

// Nested Dynamic Routes:   
app > products > [productId] > reviews > [reviewId] > page.tsx 

// Catch-all segments: 
app > docs > [...slug]     
(will match any URL with 'docs' in the path)
(Example: localhost:3000/docs/lecture/topic1/point2...)

- To access various URL segments in the code, we use param
- To make slug section optional, use two [] so that docs page is also shown (Error!!!)